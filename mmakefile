#!/bin/bash
if [ "$#" != 2 ]
then
    echo "usage : mmakefile [name] [-classic, -csfml or -ncurse]"
    echo -e "\nFile : (file that the makefile can create)\n
 - library\t: file with extension '.a' (ex: mmakefile libmy.a classic)
 - executable\t: binary file with extension '.out' or not (ex : mmakefile calc classic)
 \nFlag :
 - classic\t: for a classic Makefile
 - csfml\t: a Makefile with include of CSFML
 - ncurse\t: a Makefile with include of ncurse
 \nCommands:
 - clean\t: remove all unnecessary files
 - fclean\t: remove all unnecessary files and the binary
 - re\t: compile your code with your modifications
 - update\t: update your makefile with your new .c
 - prepush\t : remove all unnecessary files and the binary, add in your git and give you a status
 "
    exit
elif [ "$(find -maxdepth 1 -type f -name "*.c")" == "" ]
then
    echo -e "mmakefile : not '.c' files detected.
mmakefile : mmakefile must be executed in the folder containing your '.c' files."
    exit
fi

echo -e "##
## EPITECH PROJECT, 2020
## Makefile
## File description:
## make file.
##

SRC\t=\t$(find -maxdepth 2 -type f -name "*.c" | sed ':a;N;$!ba;s/\n/ \\\n\t\t/g;$ s/$//g')\n
OBJ\t=\t\$(SRC:.c=.o)\n
NAME\t=\t$1\n"   >   Makefile

if [ "$1" == "$(echo $1 | grep -e "\w*\.a$")" ]
then
    echo -e "\$(NAME):
\tgcc -c \$(SRC)
\tar -rc \$(NAME) \$(OBJ)
\tcp \$(NAME) ..
\tmkdir -p ../../include
\tcp *.h ../../include\n
clean:
\trm -f *.o
\trm -f *# *~ ./*/*# ./*/*~ ./*/*/*# ./*/*/*~ vgcore*\n
fclean: clean
\trm -f \$(NAME)
\trm -r ../../include
\trm -f ../\$(NAME)\n
re:\tfclean all
valgrind: clean
\t gcc -g3 -o \$(NAME) \$(SRC) -I include/ -L lib/ -lmy
update:
\t mmakefile $1 $2
prepush: fclean
\tgit add .\n\tgit status"   >>    Makefile
echo "Makefile avec la lib crée !"
elif [ "$(find -maxdepth 2 -type d -name "my")" == "./lib/my" ]
then
    echo -e "all:\t\$(NAME)\n
\$(NAME):
\tcd lib/my/ && make && cd ../..
\tgcc -c \$(SRC) -I include/ -L lib/ -lmy
\tgcc -o \$(NAME) \$(OBJ) -I include/ -L lib/ -lmy\n
clean:
\tcd lib/my/ && make clean && cd ../..
\trm -f *.o
\trm -f *# *~ ./*/*# ./*/*~ ./*/*/*# ./*/*/*~ vgcore*\n
fclean: clean
\trm -f \$(NAME)
\tcd lib/my/ && make fclean && cd ../..\n
re:\tfclean all\n
valgrind: clean
\t gcc -g3 -o \$(NAME) \$(SRC) -I include/ -L lib/ -lmy
\nupdate:
\t mmakefile $1 $2
\nprepush: fclean
\tgit add .\n\tgit status"   >>   Makefile
echo "Makefile avec la lib crée !"
elif [ "$2" == "-csfml" ]
then
  echo -e "CSFML = -lcsfml-graphics -lcsfml-window -lcsfml-system -lcsfml-audio\n
all:\t\$(NAME)\n
\$(NAME):
\tgcc -c \$(SRC)
\tgcc -o \$(NAME) \$(OBJ) \$(CSFML)\n
clean:
\trm -f *.o
\trm -f *# *~ ./*/*# ./*/*~ ./*/*/*# ./*/*/*~ vgcore*\n
fclean: clean
\trm -f \$(NAME)\n
re:\tfclean all\n
valgrind: clean
\t gcc -g3 -o \$(NAME) \$(SRC) \$(CSFML)
\nupdate:
\t mmakefile $1 $2
\nprepush: fclean
\tgit add .\n\tgit status"   >>   Makefile
echo "Makefile csfml crée !"
elif [ "$2" == "-ncurse" ]
then
  echo -e "all:\t\$(NAME)\n
\$(NAME):
\tgcc -c \$(SRC)
\tgcc -o \$(NAME) \$(OBJ) -lncurses\n
clean:
\trm -f *.o
\trm -f *# *~ ./*/*# ./*/*~ ./*/*/*# ./*/*/*~ vgcore*\n
fclean: clean
\trm -f \$(NAME)\n
re:\tfclean all\n
valgrind: clean
\t gcc -g3 -o \$(NAME) \$(SRC) -lncurses
\nupdate:
\t mmakefile $1 $2
\nprepush: fclean
\tgit add .\n\tgit status"   >>   Makefile
echo "Makefile ncurse crée !"
else
    echo -e "all:\t\$(NAME)\n
\$(NAME):
\tgcc -c \$(SRC)
\tgcc -o \$(NAME) \$(OBJ)\n
clean:
\trm -f *.o
\trm -f *# *~ ./*/*# ./*/*~ ./*/*/*# ./*/*/*~ vgcore*\n
fclean: clean
\trm -f \$(NAME)\n
re:\tfclean all\n
valgrind: clean
\t gcc -g3 -o \$(NAME) \$(SRC)
\nupdate:
\t mmakefile $1 $2
\nprepush: fclean
\tgit add .\n\tgit status"   >>   Makefile
echo "Makefile classique crée !"
fi
